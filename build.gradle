/*
 * Copyright (c) 2019-2022 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext.kotlinVersion = '1.5.32'
  repositories {
		mavenCentral()
  }
  dependencies {
	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
  }
}

plugins {
  //NB: stdlib version is defined by this plugin's version
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
  id "org.jetbrains.dokka" version "1.5.31"
  id "com.jfrog.artifactory" version "4.15.2" apply false
}

//NOTE: reactor dependency versions are now defined in gradle.properties

configure(rootProject)  { project ->
	apply plugin: 'kotlin'
	apply from: "gradle/dokka.gradle"
	apply from: "gradle/publishing.gradle"
	apply from: "gradle/releaser.gradle"

	description = 'Kotlin extensions for Project Reactor'
	group = 'io.projectreactor.kotlin'

	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url "https://maven-eclipse.github.io/maven" }
		if (version.endsWith('-SNAPSHOT')) {
			maven { url 'https://repo.spring.io/snapshot' }
		}
		maven { url 'https://repo.spring.io/milestone' }
	}

  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions.jvmTarget = "1.8"
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
  }

	dependencies {
		implementation "io.projectreactor:reactor-core:${reactorCoreVersion}"
		testImplementation "io.projectreactor:reactor-test:${reactorCoreVersion}"

		compileOnly "io.projectreactor:reactor-test:${reactorCoreVersion}"
		testImplementation "io.projectreactor:reactor-test:${reactorCoreVersion}"

		compileOnly "io.projectreactor.addons:reactor-extra:${reactorAddonsVersion}"
		testImplementation "io.projectreactor.addons:reactor-extra:${reactorAddonsVersion}"

		compileOnly "io.projectreactor.addons:reactor-adapter:${reactorAddonsVersion}"
		testImplementation "io.projectreactor.addons:reactor-adapter:${reactorAddonsVersion}"
		compileOnly "io.reactivex.rxjava2:rxjava:2.2.8"
		testImplementation "io.reactivex.rxjava2:rxjava:2.2.8"
		compileOnly "org.eclipse.swt:org.eclipse.swt.${getSwtPlatform()}:4.5.2"
		testImplementation "org.eclipse.swt:org.eclipse.swt.${getSwtPlatform()}:4.5.2"

		//NB: stdlib version is defined by the kotlin jvm plugin's version
		compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
		testImplementation 'org.jetbrains.kotlin:kotlin-stdlib'

		testImplementation 'junit:junit:4.12'
		testImplementation 'org.assertj:assertj-core:3.12.2'
	}
}


//TODO switch to returning libs from the Versions Catalog directly
def getSwtPlatform() {
  String osname = System.properties['os.name']
  String osarch = System.properties['os.arch']
  if (osname.toLowerCase(Locale.ROOT).contains('win')) {
	if (osarch.contains("64")) {
	  return "win32.win32.x86_64"
	}
	return "win32.win32.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("nux")) {
	if (osarch.contains("64")) {
	  return "gtk.linux.x86_64"
	}
	return "gtk.linux.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("mac")) {
	return "cocoa.macosx.x86_64"
  }
  throw new RuntimeException("Unknown OS/Arch: " + osname + ", " + osarch)
}